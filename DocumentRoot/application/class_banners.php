<?

// +++ ================================================================================================================
// Класс показа баннеров
class banners extends general
 {
  private $db;
  
  // +++ ==============================================================================================================
  // В конструкторе создаём экземпляр класса db, с помощью которого общаемся с БД
  function __construct()
   {
    parent::__construct();
	$this->db = new db();
   }
  // --- ==============================================================================================================
  
  // +++ ==============================================================================================================
  // Возвращает собранный кусок HTML с банерами
  public function get_banners($quantity, $texttpl='banners/textbanner.tpl', $graphtpl='banners/graphbanner.tpl')
   {
    // Выбираем из БД уникальные идентификаторы (первичные ключи) ВСЕХ банеров того языка, на котором юзер смотрит страницу
	$r = $this->db->query("SELECT `b_uid` from `banners` where `b_lng`='$this->lng' AND `b_show`>`b_show_f` AND `b_click`>`b_click_f`");
	
	// Если банеров не нашлось, возвращаем пустую строку
	if ($r['num']==0)
	 {
	  return '';
	 }
	
	// Формируем массив уникальных идентификаторов банеров
	$uids = array();
	while ($row = $r['res']->fetch_assoc()) 
	 {
	  $uids[]=$row[0];
	 }
	
	// Определяем имя шаблона, проверяем наличие файла шаблона и читаем файл шаблона в переменную для текстовых банеров
	$texttpl = $this->templates_dir.$texttpl;
	if (!is_file($texttpl))
	 {
	  parent::log_error('Text banner template not found', FALSE, 5);
	 }
	  else
	 {
	  $texttpl = file_get_contents($texttpl);
	 } 
	
    // Определяем имя шаблона, проверяем наличие файла шаблона и читаем файл шаблона в переменную для графических банеров	
	$graphtpl = $this->templates_dir.$graphtpl;
	if (!is_file($graphtpl))
	 {
	  parent::log_error('Graphic banner template not found', FALSE, 5);
	 }
	  else
	 {
	  $graphtpl = file_get_contents($graphtpl);
	 }  
	
	// Инициализируем накопительную переменную пустой строкой
	$all = '';
	
	// Повторяем цикл столько раз, сколько банеров нужно показать
	for ($i=0;$i<$quantity;$i++)
	 {
	  // Получаем случайный индекс массива в диапазоне (0, количество_элементов_в_массиве)
	  $rn = rand(0, count($uids)-1);
	  
	  // По индексу массива получаем уникальный идентификатор банера
	  if (!isset($uids[$rn])) continue;
	  
	  $uid = $uids[$rn];
	  
	  // Извлекаем из БД информацию о банере
	  $r = $this->db->query("SELECT * from `banners` where `b_uid`='$uid'");
      
	  // Если такой банер есть...
	  if ($r['num']==1)
	   {
            $row = $r['res']->fetch_assoc();
		
		// Если это графический банер...
		if (trim($row['b_graph'])!='')
		 {
		  $tpl = $graphtpl;
		  $tpl = str_replace('{ITEM_GRAPH}', $row['b_graph'], $tpl);
		 }
		  else // Если это текстовый банер...
		 {
		  $tpl = $texttpl;
		 }
		
		// Эти замены актуальны и для графических, и для текстовыхз банеров
		$tpl = str_replace('{ITEM_UID}', $row['b_uid'], $tpl);
		$tpl = str_replace('{ITEM_TEXT}', $row['b_text'], $tpl);
	   }
	  
	  // Увеличиваем количество показов банера
	  $r = $this->db->query("UPDATE `banners` SET `b_show_f`=`b_show_f`+1 where `b_uid`='$uid'");
	  
	  // Убираем из массива идентификаторов идентификатор только что показанного банера
	  unset($uids[$rn]);
	  
	  // Убираем из массива идентификаторов "дырку", образовавшуюся после удаления оттуда идентификатора только что опказанного банера
	  $uids = array_values($uids);
	  
	  // Добавляем в накопительную переменную обработанный шаблон одного банера
	  $all .= $tpl;
	 }
	
	// Возвращам готовый кусок HTML
	return $all;
   }
  // --- ==============================================================================================================
  
  // +++ ==============================================================================================================
  // Выполняет переход по ссылке банера и обновляет информацию о кликах по банеру
  public function banner_click($uid) 
   {
	
	// Извлекаем из БД информацию о банере, по которому кликнули
	$r = $this->db->query("SELECT * from `banners` where `b_uid`='$uid'");
	
	// Если такого банера нет, или их вдруг стаол больше 1-го...
	if ($r['num']!==1)
	 {
	  // Перекидываем юзера на страницу 404
	  header("Location: /".$this->lng."/404/");
	  parent::log_error('Banner not found!');
	  die();
	 }
	  else
	 {
	  // Извлекаем информацию о банере, по которому кликнули
          $row = $r['res']->fetch_assoc();
	  
	  // обновляем количество кликов
	  $r = $this->db->query("UPDATE `banners` SET `b_click_f`=`b_click_f`+1 where `b_uid`='$uid'");
	  
	  // Осуществляем переход по URL'у банера, по которому кликнули
	  header("Location: ".$row['b_url']);
	  die();
	 } 
   }
  // --- ==============================================================================================================
  
  // +++ ==============================================================================================================
  // В деструкторе убираем уже не нужный нам экземпляр класса db
  function __destruct()
   {
    unset($this->db);
   }  
  // --- ============================================================================================================== 
 }
// --- ================================================================================================================
?>